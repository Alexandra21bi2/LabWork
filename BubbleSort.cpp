#include "bubbleSort.h"


//сортировка осуществл€етс€ посредством попарного сравнени€ двух соседних элементов массива
// в случае если пор€док неправильный - элементы мен€ютс€ местами
// сортировка осуществл€етс€ до тех пор, пока элементы не встанут в правильным пор€дке
//создаетс€ функци€ дл€ реализации сортировки
template <typename T> //объ€вление параметра шаблона функции
T bubbleSort(T arr[], int n)
{
    //создаетс€ массив, переменные и длина массива, задаютс€ услови€ дл€ сравнени€ соседних элементов массива
    int i, j;
    for (i = 0; i < n - 1; i++) 
    {
        for (j = 0; j < n - i - 1; j++) 
        {
            if (arr[j] > arr[j + 1])  //сравниваем элементы
            {//мен€ем элементы местами
                T temp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = temp; 
            }
        }
    }
    return 0;
}

// с помощью данной функции происходит вывод массива
template <typename P>
P printArr(P arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        std::cout << arr[i] << " ";
    return 0;
}

//задаетс€ массив со значени€ми, вызываютс€ функции
int main()
{
    int arr[] = { 7, 9, 12, 15, 5, 11, 23, 19, 45, 76 };
    int size_arr = sizeof(arr) / sizeof(arr[0]);//высчитываетс€ размер массива
    bubbleSort(arr, size_arr);//происходит вызов функции bubbleSort()
    std::cout << "Sorted array:" << std::endl;
    printArr(arr, size_arr); //происходит вызов функции printArr()
    return 0;
}