#include "gnome.h"

//√номь€ сортировка основана на технике, 
// используемой обычным голландским садовым гномом дл€ сортировки линии цветочных горшков 
//√ном смотрит на соседние садовые горшки: 
//если они в правильном пор€дке, он шагает на один горшок вперЄд, 
// иначе он мен€ет их местами и шагает на один горшок назад, сравнива€ их далее. 
// √раничные услови€: если нет предыдущего горшка, 
//он шагает вперЄд; если нет следующего горшка - заканчивает.
//сравнив элемент в середине массива со всеми в начале 
// можно вернутьс€ сразу туда где прервалось действие и следовать по массиву далее.
template <typename T> //объ€вление параметра шаблона функции
//функци€ дл€ реализации гномьей сортировки
T gnomeSort(T arr[], int n) //задаетс€ массив, размера n
{
    T elem = 0; //создаетс€ переменна€ со значение 0, котора€ обозначает индекс элемента в массиве

    while (elem < n) //задаем услови€ дл€ работы функции
    { 
        if (elem == 0) //если индекс элемента равен 0, то шагаем дальше
            elem++;
        if (arr[elem] >= arr[elem - 1]) //сравниваем элемент массива с предыдущим 
            elem++; //если они сто€т в правильном пор€дке идем на элемент дальше
        else {
            std::swap(arr[elem], arr[elem - 1]); //если нет,то мен€ем их местами и двигаемс€ назад
            elem--; //чтобы сравнивать элементы дальше
        }
    }
    return 0;
}
template <typename S>
// функци€ дл€ вывода массива 
S printArray(S arr[], int n)
{
    for (int i = 0; i < n; i++)
        std::cout << arr[i] << " ";
    return 0;
}

// происходит присваивание значений массиву, вызову функций
int main()
{
    int arr[] = { 3, 7, 5, 13, 21, -7, 0};
    int size_arr = sizeof(arr) / sizeof(arr[0]); //считаетс€ размер массива

    gnomeSort(arr, size_arr); //происходит вызов функциии gnomeSort()
    std::cout << "Sorted array after Gnome sort: " << std::endl;
    printArray(arr, size_arr); //происходит вызов функциии printArray()

    return 0;
}